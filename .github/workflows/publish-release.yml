name: 📦 Publish to npm

on:
  push:
    branches: [main]

jobs:
  Build:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: 📥 Checkout Commit
        uses: actions/checkout@v3

      - name: 📦 Parse package.json
        id: packageInfo
        run: |
          echo "PACKAGE_NAME=$(jq -r .name package.json)" >> $GITHUB_ENV
          echo "PACKAGE_VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV
          echo "COMMIT_MSG=$(git log -1 --pretty=%B)" >> $GITHUB_ENV

      - name: 🧠 Check if version tag already exists
        id: check_tag
        run: |
          if git rev-parse "v$PACKAGE_VERSION" >/dev/null 2>&1; then
            echo "Version v$PACKAGE_VERSION already tagged. Skipping publish."
            echo "should_publish=false" >> $GITHUB_OUTPUT
          else
            echo "New version detected: v$PACKAGE_VERSION"
            echo "should_publish=true" >> $GITHUB_OUTPUT
          fi

      - name: 🛠️ Setup Node.js
        if: steps.check_tag.outputs.should_publish == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org/"

      - name: 📦 Install Dependencies
        if: steps.check_tag.outputs.should_publish == 'true'
        run: npm i

      - name: 🏗️ Build
        if: steps.check_tag.outputs.should_publish == 'true'
        run: npm run build:tsc

      - name: 🏷️ Create GitHub Release
        if: steps.check_tag.outputs.should_publish == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.PACKAGE_VERSION }}
          release_name: v${{ env.PACKAGE_VERSION }}
          body: ${{ env.COMMIT_MSG }}
          draft: false
          prerelease: false

      - name: 🚀 Publish to npm
        if: steps.check_tag.outputs.should_publish == 'true'
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
